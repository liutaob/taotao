package com.taotao.content.service.impl;

import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.taotao.common.pojo.EasyUIDataGridResult;
import com.taotao.common.pojo.TaotaoResult;
import com.taotao.common.utils.JsonUtils;
import com.taotao.content.service.ContentService;
import com.taotao.jedis.JedisClient;
import com.taotao.mapper.TbContentMapper;
import com.taotao.mapper.TbItemCatMapper;
import com.taotao.pojo.TbContent;
import com.taotao.pojo.TbContentExample;
import com.taotao.pojo.TbContentExample.Criteria;
import com.taotao.pojo.TbItemCat;
import com.taotao.pojo.TbItemCatExample;

/**
 * 内容管理
 * 
 * @author liut
 * @date 下午6:38:01
 */
@Service
public class ContentServiceImpl implements ContentService {

	@Autowired
	private TbContentMapper contentMapper;
	@Autowired
	private TbItemCatMapper itemCatMapper;
	@Autowired
	private JedisClient jedisClient;
	@Value("${INDEX_CONTENT}")
	private String INDEX_CONTENT;

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.taotao.content.service.ContentService#getContentList(int, int)
	 * 内容分页展示
	 */
	@Override
	public EasyUIDataGridResult getContentList(int page, int rows, Long categoryId) {
		PageHelper.startPage(page, page);
		// 设置分页信息
		// 执行查询
		TbContentExample example = new TbContentExample();
		// 设置查询条件
		Criteria criteria = example.createCriteria();
		// 设置categoryId
		criteria.andCategoryIdEqualTo(categoryId);
		List<TbContent> list = contentMapper.selectByExampleWithBLOBs(example);
		PageInfo<TbContent> pageInfo = new PageInfo<TbContent>(list);
		// 取查询结果
		EasyUIDataGridResult result = new EasyUIDataGridResult();
		result.setRows(list);
		result.setTotal(pageInfo.getTotal());
		return result;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.taotao.content.service.ContentService#addContent(com.taotao.pojo.
	 * TbContent) 新增内容
	 */
	@Override
	public TaotaoResult addContent(TbContent content) {
		// 补全属性
		content.setCreated(new Date());
		content.setUpdated(new Date());
		// 插入数据库
		contentMapper.insert(content);
		// 同步缓存
		// 删除对应的缓存信息
		jedisClient.hdel(INDEX_CONTENT, content.getCategoryId().toString());
		// 返回结果
		return TaotaoResult.ok();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.taotao.content.service.ContentService#updateContent(com.taotao.pojo.
	 * TbContent) 编辑内容列表
	 */
	@Override
	public TaotaoResult updateContent(TbContent content) {
		// 根据id查找到要更新的内容列表
		TbContent oldContent = contentMapper.selectByPrimaryKey(content.getId());
		// 修改内容属性
		content.setCreated(oldContent.getCreated());
		content.setUpdated(new Date());
		// 更新数据库
		contentMapper.updateByPrimaryKeyWithBLOBs(content);
		// 同步缓存
		// 删除对应的缓存信息
		jedisClient.hdel(INDEX_CONTENT, content.getCategoryId().toString());
		return TaotaoResult.ok();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.taotao.content.service.ContentService#deleteContent(java.lang.String)
	 * 删除内容列表
	 */
	@Override
	public TaotaoResult deleteContent(String ids) {
		// 切割逐一删除
		String[] split = ids.split("[,]");
		for (String string : split) {
			long id = Long.parseLong(string);
			contentMapper.deleteByPrimaryKey(id);
			// 同步缓存
			// 删除对应的缓存信息
			TbContent content = contentMapper.selectByPrimaryKey(id);
			jedisClient.hdel(INDEX_CONTENT, content.getCategoryId().toString());
		}
		return TaotaoResult.ok();
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.taotao.content.service.ContentService#getContenListByCid(java.lang.Long)
	 * 根据内容分类id 获取内容列表 轮播图广告
	 */
	@Override
	public List<TbContent> getContenListByCid(Long categoryId) {
		// 先查询缓存
		// 添加缓存不能影响正常业务逻辑
		try {
			// 查询缓存
			String json = jedisClient.hget(INDEX_CONTENT, categoryId + "");
			// 查询到结果，把json转换成List返回
			if (StringUtils.isNotBlank(json)) {
				List<TbContent> list = JsonUtils.jsonToList(json, TbContent.class);
				return list;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		// 缓存中没有命中，需要查询数据库
		TbContentExample example = new TbContentExample();
		Criteria criteria = example.createCriteria();
		// 设置查询条件
		criteria.andCategoryIdEqualTo(categoryId);
		// 执行查询
		List<TbContent> list = contentMapper.selectByExample(example);
		// 把结果添加到缓存
		try {
			jedisClient.hset(INDEX_CONTENT, categoryId + "", JsonUtils.objectToJson(list));
		} catch (Exception e) {
			e.printStackTrace();
		}
		// 返回结果
		return list;
	}

	/*
	 * (non-Javadoc)
	 * @see com.taotao.service.ItemCatService#getAllItemCatList() 
	 * 	首页展示所有商品类目
	 */
	@Override
	public List<TbItemCat> getAllItemCatList() {
		// 先查询缓存
		// 添加缓存不能影响正常业务逻辑
		try {
			// 查询缓存
			String json = jedisClient.get("allItemCat");
			// 查询到结果，把json转换成List返回
			if (StringUtils.isNotBlank(json)) {
				List<TbItemCat> list = JsonUtils.jsonToList(json, TbItemCat.class);
				return list;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		// 查询数据库
		TbItemCatExample example = new TbItemCatExample();
		List<TbItemCat> list = itemCatMapper.selectByExample(example);
		// 把结果添加到缓存
		try {
			jedisClient.set("allItemCat", JsonUtils.objectToJson(list));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}
}
